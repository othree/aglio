// Generated by CoffeeScript 1.12.7
(function() {
  var expandDS;

  module.exports = expandDS = function(root, dataStructures) {
    var clonedRoot, i, index, item, j, k, keyOfArray, len, len1, len2, newRoot, newValue, ref, ref1, ref2, ref3, valueOfArray, valueOfContent;
    clonedRoot = JSON.parse(JSON.stringify(root));
    switch (clonedRoot.element) {
      case 'boolean':
      case 'string':
      case 'number':
      case 'enum':
        break;
      case 'member':
        valueOfContent = clonedRoot['content']['value'];
        newValue = expandDS(valueOfContent, dataStructures);
        clonedRoot.content['value'] = newValue;
        break;
      case 'object':
        ref1 = clonedRoot.content;
        for (index = i = 0, len = ref1.length; i < len; index = ++i) {
          item = ref1[index];
          clonedRoot.content[index] = expandDS(item, dataStructures);
        }
        break;
      case 'array':
        if (clonedRoot.content) {
          ref2 = clonedRoot.content;
          for (keyOfArray = j = 0, len1 = ref2.length; j < len1; keyOfArray = ++j) {
            valueOfArray = ref2[keyOfArray];
            newValue = expandDS(valueOfArray, dataStructures);
            clonedRoot.content = [];
            clonedRoot.content[keyOfArray] = newValue;
            break;
          }
        }
        break;
      default:
        ref = dataStructures[clonedRoot.element];
        if (ref) {
          newRoot = expandDS(ref, dataStructures);
          if (clonedRoot.content) {
            ref3 = clonedRoot.content;
            for (k = 0, len2 = ref3.length; k < len2; k++) {
              valueOfArray = ref3[k];
              newValue = expandDS(valueOfArray, dataStructures);
              newRoot.content.push(newValue);
            }
          }
          clonedRoot = newRoot;
        }
    }
    return clonedRoot;
  };

}).call(this);
